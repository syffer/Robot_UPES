package controller;

import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

import model.ImageModel;

import view.JFileChooserException;
import view.View;

public class GeneralController {

	protected View view;
	
	protected ActionLoad actionLoad;
	protected ActionSave actionSave;
		
	public GeneralController() {
		
		this.view = new View();	
		
		this.actionLoad = new ActionLoad();
		this.actionSave = new ActionSave();
				
		this.view.menuLoad.setAction(this.actionLoad);
		this.view.menuSave.setAction(this.actionSave);
		
	}
	
	
	
	
	
	public class ActionLoad extends AbstractAction {
		private static final long serialVersionUID = 7721629641991701632L;

		public ActionLoad() {
			super("Load");
			
			// this.putValue(...)
		}
		
		@Override
		public void actionPerformed(ActionEvent event) {
			
			try { 
				
				File choosenFile = view.getFileToLoad();
				
				long startTime = System.currentTimeMillis();
				BufferedImage bufferedImage = ImageIO.read(choosenFile);
				long endTime = System.currentTimeMillis();
				
				ImageModel imageModel = new ImageModel(bufferedImage, choosenFile.getPath());
				ImageController imageController = new ImageController(imageModel, "Loading", endTime - startTime);
				
				// http://stackoverflow.com/questions/18633164/how-to-ask-are-you-sure-before-close-jinternalframe 
				imageController.imageView.addInternalFrameListener(new InternalFrameAction());
				
				view.desktop.add(imageController.imageView);
				
			} catch (JFileChooserException e) {
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			
			
		}
	}
	
	
	private void activateActions() {
		
		System.out.println("activated");
		
		//this.actionSave.setEnabled(true);
	}
	
	private void desactivateActions() {
		//this.actionSave.setEnabled(false);
	}
	
	
	public class ActionSave extends AbstractAction {
		private static final long serialVersionUID = 1L;

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
			
		} 
		
	}
	
	
	
	public class InternalFrameAction implements InternalFrameListener {
		
		@Override
		public void internalFrameActivated(InternalFrameEvent event) {
			System.out.println("activate");
			activateActions();
		}

		@Override
		public void internalFrameDeactivated(InternalFrameEvent event) { 
			System.out.println("desactivate");
			desactivateActions();
		}
		
		@Override
		public void internalFrameOpened(InternalFrameEvent event) {
			// TODO Auto-generated method stub
		}
		
		@Override
		public void internalFrameClosed(InternalFrameEvent event) {
			// TODO Auto-generated method stub
		}

		@Override
		public void internalFrameClosing(InternalFrameEvent event) {
			// TODO Auto-generated method stub
		}
		
		@Override
		public void internalFrameDeiconified(InternalFrameEvent event) {
			// TODO Auto-generated method stub
		}

		@Override
		public void internalFrameIconified(InternalFrameEvent event) {
			// TODO Auto-generated method stub
		} 
	}
	
	
	
	
	public class Action extends AbstractAction {

		@Override
		public void actionPerformed(ActionEvent arg0) {
			// TODO Auto-generated method stub
			
		} 
		
	}
	
}
