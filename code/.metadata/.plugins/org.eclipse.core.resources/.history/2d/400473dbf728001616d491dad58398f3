package view;

import java.awt.Dimension;
import java.awt.Image;
 
import javax.swing.ImageIcon;
import javax.swing.JLabel;
 
public class IconLabel extends JLabel
{
   private ImageIcon _icon;
   private int       _width  = 40;
   private int       _height = 40;
 
   public IconLabel(ImageIcon icon)
   {
      super();
 
      this._icon = icon;
   }
 
   public IconLabel(ImageIcon icon, int width, int height)
   {
      super();
 
      this._icon = icon;
 
      setWidth(width);
      setHeight(height);
   }
 
   public IconLabel(Image image)
   {
      super();
 
      this._icon = new ImageIcon(image);
   }
 
   public IconLabel(Image image, int width, int height)
   {
      super();
 
      this._icon = new ImageIcon(image);
 
      setWidth(width);
      setHeight(height);
   }
 
   public void setWidth(int width)
   {
      _width = width;
   }
 
   public void setHeight(int height)
   {
      _height = height;
   }
 
   @Override
   public Dimension getPreferredSize()
   {
      return new Dimension(_width,_height);
   }
 
   @Override
   public void paintComponent(java.awt.Graphics g)
   {
      super.paintComponent(g);
      int xOffset = 0;
      int yOffset = 0;
 
      //Rescale the image such that it maintains its aspect ratio but fits within the IconLabel size
      java.awt.image.BufferedImage scaledAndCenteredImage = new java.awt.image.BufferedImage(_width, _height, java.awt.image.BufferedImage.TRANSLUCENT);
 
      Dimension scaledDimension = getScaledDimension( new Dimension(_icon.getImage().getWidth(null) ,  _icon.getImage().getHeight(null)), new Dimension(_width, _height));
 
      //Center the scaled image into the BufferedImage
      if (scaledDimension.getWidth() < _width)
      {
         xOffset = (int) (_width - scaledDimension.getWidth())/2;
      }
 
      if (scaledDimension.getHeight() < _height)
      {
         xOffset = (int) (_height - scaledDimension.getHeight())/2;
      }
 
      scaledAndCenteredImage.getGraphics().drawImage(_icon.getImage(), xOffset, yOffset, (int) scaledDimension.getWidth(), (int) scaledDimension.getHeight(), this);
 
      g.drawImage(scaledAndCenteredImage,0,0,getWidth(),getHeight(),this);
   }
 
   private static Dimension getScaledDimension(Dimension imgSize, Dimension boundary)
   {
      //this function comes from http://stackoverflow.com/questions/10245220/java-image-resize-maintain-aspect-ratio
      int original_width = imgSize.width;
      int original_height = imgSize.height;
      int bound_width = boundary.width;
      int bound_height = boundary.height;
      int new_width = original_width;
      int new_height = original_height;
 
      // first check if we need to scale width
      if (original_width > bound_width) {
          //scale width to fit
          new_width = bound_width;
          //scale height to maintain aspect ratio
          new_height = (new_width * original_height) / original_width;
      }
 
      // then check if we need to scale even with the new height
      if (new_height > bound_height) {
          //scale height to fit instead
          new_height = bound_height;
          //scale width to maintain aspect ratio
          new_width = (new_height * original_width) / original_height;
      }
 
      return new Dimension(new_width, new_height);
  }
}